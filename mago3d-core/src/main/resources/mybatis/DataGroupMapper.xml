<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gaia3d.persistence.DataGroupMapper">

	<!-- Data 그룹 목록 -->
	<select id="getListDataGroup" parameterType="dataGroup" resultType="dataGroup">
		/* getListDataGroup */
		WITH RECURSIVE data_group_tree (
			data_group_id, data_group_key, data_group_name, ancestor, parent, depth, view_order, default_yn, 
			use_yn, child_yn, latitude, longitude, height, duration, description, insert_date, path, cycle
		) AS (
	        SELECT A.data_group_id, A.data_group_key, A.data_group_name, A.ancestor, A.parent, A.depth, A.view_order, A.default_yn, 
	        	A.use_yn, A.child_yn, A.latitude, A.longitude, A.height, A.duration, A.description, A.insert_date, ARRAY[A.view_order], false
			FROM data_group A
	        WHERE A.parent = 0
	        <if test="use_yn == 'Y'.toString()">
	        	AND A.use_yn = 'Y'
	        </if>
			UNION ALL
	        SELECT A.data_group_id, A.data_group_key, A.data_group_name, A.ancestor, A.parent, A.depth, A.view_order, A.default_yn,
	        	A.use_yn, A.child_yn, A.latitude, A.longitude, A.height, A.duration, A.description, A.insert_date, path || A.view_order, A.data_group_id = ANY(path)
	        FROM data_group A, data_group_tree B
	        WHERE A.parent = B.data_group_id AND not cycle
		)
	    SELECT data_group_id, data_group_key, data_group_name, ancestor, parent, depth, view_order, default_yn, use_yn, child_yn, latitude, longitude, height, duration, description, insert_date, path
	    FROM data_group_tree
	    <if test="use_yn == 'Y'.toString()">
	    WHERE use_yn = 'Y'
	    </if>
		ORDER BY path
	</select>
	
	<!-- depth별 Data 그룹 목록 -->
	<select id="getListDataGroupByDepth" parameterType="int" resultType="dataGroup">
		/* getListDataGroupByDepth */
		SELECT * FROM data_group WHERE depth = #{depth} and use_yn = 'Y' ORDER BY view_order, data_group_id
	</select>
	
	<!-- ancestor별 Data 그룹 목록 -->
	<select id="getListDataGroupByAncestor" parameterType="long" resultType="dataGroup">
		/* getListDataGroupByAncestor */
		SELECT * 
		FROM data_group 
		WHERE ancestor = #{ancestor} 
		ORDER BY depth, view_order
	</select>
	
	<!-- Data 그룹 -->
	<select id="getDataGroup" parameterType="long" resultType="dataGroup">
		/* getDataGroup */
		SELECT * FROM data_group WHERE data_group_id = #{data_group_id} 
	</select>
	
	<!-- Data 그룹 -->
	<select id="getDataGroupByGeo" parameterType="dataGroup" resultType="dataGroup">
		/* getDataGroupByGeo */
		SELECT *, 
			ST_Distance(
				ST_GeographyFromText('SRID=4326;POINT('||longitude||' '||latitude||')'), 
				ST_GeographyFromText(#{location})
			) AS distance
		FROM data_group
		WHERE use_yn = 'Y'
		ORDER BY distance
		LIMIT 1
	</select>
	
	<!-- Data 그룹에 속한 자식 그룹 개수 -->
	<select id="getDataGroupChildCount" parameterType="long" resultType="int">
		/* getDataGroupChildCount */
		SELECT COUNT(*) FROM data_group WHERE parent = #{parent} and use_yn = 'Y'
	</select>
	
	<!-- Data 그룹에 속한 자식 그룹 목록 -->
	<select id="getListDataGroupChild" parameterType="long" resultType="long">
		/* getListDataGroupChild */
		SELECT data_group_id FROM data_group WHERE parent = #{parent}
	</select>

	<!-- 부모와 순서를 가지고 Data 그룹 정보를 취득 -->
	<select id="getDataGroupByParentAndViewOrder" parameterType="dataGroup" resultType="dataGroup">
		/* getDataGroupByParentAndViewOrder */
		SELECT * 
		FROM data_group 
		WHERE parent = #{parent} 
		<if test="update_type == 'up'.toString()">
			<![CDATA[
			AND view_order < #{view_order}
			]]>
		ORDER BY view_order DESC 
		</if>
		<if test="update_type == 'down'.toString()">
			<![CDATA[
			AND view_order > #{view_order}
			]]>
		ORDER BY view_order 
		</if>
		LIMIT 1 
	</select>
	
	<!-- 자식 그룹 중 맨 마지막 순서의 그룹 정보를 취득 -->
	<select id="getMaxViewOrderChildDataGroup" parameterType="long" resultType="dataGroup">
		/* getMaxViewOrderChildDataGroup */
		SELECT * FROM data_group WHERE parent = #{parent} ORDER BY view_order DESC LIMIT 1 
	</select>
	
	<!-- TODO BDR 때문에 한거 같은데... sequence로 바꿔야 함 -->
	<!-- data_group_id 최대값 -->
	<select id="getMaxDataGroupId" resultType="long">
		/* getMaxDataGroupId */
		SELECT COALESCE(MAX(data_group_id), 0) + 1 FROM data_group
	</select>
	
	<!-- Data 그룹 등록 -->
	<insert id="insertDataGroup" parameterType="dataGroup" >
		/* insertDataGroup */
		INSERT INTO data_group(
			data_group_id, data_group_key, data_group_name, ancestor, parent, depth, view_order, use_yn, latitude, longitude, height, duration, description
		) values(
			#{data_group_id}, #{data_group_key}, #{data_group_name}, 
			<if test="depth != null and depth == 1">
			#{data_group_id},
			</if>
			<if test="depth != null and depth != 1">
			#{ancestor},
 			</if>
			#{parent}, #{depth}, #{view_order}, #{use_yn}, #{latitude}, #{longitude}, #{height}, #{duration}, #{description}
		)
	</insert>
	
	<!-- Data 그룹 수정 -->
	<update id="updateDataGroup" parameterType="dataGroup">
		/* updateDataGroup */
		UPDATE data_group
		SET data_group_key = #{data_group_key},
			data_group_name = #{data_group_name},
			<if test="parent != null and parent != ''">
			ancestor = #{ancestor},
			</if>
			<if test="parent != null and parent != ''">
			parent = #{parent},
			</if>
			<if test="depth != null and depth != ''">
			depth = #{depth},
			</if>
			<if test="view_order != null and view_order != ''">
			view_order = #{view_order},
			</if>
			use_yn = #{use_yn},
			latitude = #{latitude},
			longitude = #{longitude},
			height = #{height},
			duration = #{duration},
			description = #{description}
		WHERE data_group_id = #{data_group_id}
	</update>
	
	<!-- Data 그룹 자식 존재 유무 수정 -->
	<update id="updateDataGroupChildYN" parameterType="dataGroup">
		UPDATE data_group
		SET child_yn = #{child_yn}
		WHERE data_group_id = #{data_group_id}
	</update>
	
	<!-- 그룹 순서 수정 -->
	<update id="updateViewOrderDataGroup" parameterType="dataGroup">
		/* updateViewOrderDataGroup */
		UPDATE data_group SET view_order = #{view_order} WHERE data_group_id = #{data_group_id}
	</update>
	
	<!-- 자식 그룹 상태 수정-->
	<!-- <update id="updateChildDataGroup" parameterType="long">
		/* updateChildDataGroup */
		UPDATE data_group SET use_yn = 'N' WHERE parent = #{parent}
	</update> -->
	
	<!-- Data 그룹 삭제 -->
	<delete id="deleteDataGroup" parameterType="long">
		/* deleteDataGroup */
		DELETE FROM data_group WHERE data_group_id = #{data_group_id} AND default_yn != 'Y'
	</delete>
</mapper>